// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.Engine.Networking.FlatBuffers
{

using global::System;
using global::Google.FlatBuffers;

public struct NetLeaderboard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NetLeaderboard GetRootAsNetLeaderboard(ByteBuffer _bb) { return GetRootAsNetLeaderboard(_bb, new NetLeaderboard()); }
  public static NetLeaderboard GetRootAsNetLeaderboard(ByteBuffer _bb, NetLeaderboard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NetLeaderboard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
  public NetLeaderboardEntry? Entries(int j) { int o = __p.__offset(6); return o != 0 ? (NetLeaderboardEntry?)(new NetLeaderboardEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<NetLeaderboard> CreateNetLeaderboard(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset entriesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    NetLeaderboard.AddEntries(builder, entriesOffset);
    NetLeaderboard.AddType(builder, typeOffset);
    return NetLeaderboard.EndNetLeaderboard(builder);
  }

  public static void StartNetLeaderboard(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset entriesOffset) { builder.AddOffset(1, entriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<NetLeaderboardEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NetLeaderboard> EndNetLeaderboard(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NetLeaderboard>(o);
  }
};


}
